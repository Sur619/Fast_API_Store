from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, List

app = FastAPI()

db_book = []


# ------------------------------
# üì¶ Pydantic –º–æ–¥–µ–ª—ñ
# ------------------------------

class Base(BaseModel):
    name: str
    price: int


class Book(Base):
    id: int


class CreateBook(Base):
    pass


class PatchBook(Base):
    name: Optional[str] = None
    price: Optional[int] = None


# ------------------------------
# üîß –£—Ç–∏–ª—ñ—Ç–∞: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è ID
# ------------------------------

def lenth_db():
    return len(db_book) + 1


# ------------------------------
# üì§ GET ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–Ω–∏–≥–∏
# ------------------------------

@app.get("/book", response_model=List[Book])
def get_books():
    return db_book


# ------------------------------
# üì• POST ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–Ω–∏–≥—É
# ------------------------------

@app.post("/book", response_model=Book)
def create_book(book: CreateBook) -> Book:
    new_book = Book(
        id=lenth_db(),
        name=book.name,
        price=book.price
    )
    db_book.append(new_book)
    return new_book


# ------------------------------
# üîÑ PATCH ‚Äî —á–∞—Å—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏
# ------------------------------

@app.patch("/book/{book_id}", response_model=Book)
def patch_book(book_id: int, updated_book: PatchBook) -> Book:
    book = next((b for b in db_book if b.id == book_id), None)
    if not book:
        raise HTTPException(status_code=404, detail="Book not found")

    book.name = updated_book.name or book.name  # –ó–∞–º—ñ–Ω–∞, —è–∫—â–æ —î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    book.price = updated_book.price or book.price  # –ó–∞–º—ñ–Ω–∞, —è–∫—â–æ —î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è

    return book


# ------------------------------
# üõ† PUT ‚Äî –ø–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏
# ------------------------------

@app.put("/book/{book_id}", response_model=Book)
def put_book(book_id: int, updated_book: CreateBook) -> Book:
    book = next((b for b in db_book if b.id == book_id), None)
    if not book:
        raise HTTPException(status_code=404, detail="Book not found")

    book.name = updated_book.name
    book.price = updated_book.price

    return book


# ------------------------------
# ‚ùå DELETE ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–∏–≥—É
# ------------------------------

@app.delete("/book/{book_id}")
def delete_book(book_id: int):
    book = next((b for b in db_book if b.id == book_id), None)
    if not book:
        raise HTTPException(status_code=404, detail="Book not found")

    db_book.remove(book)  # –¢–µ–ø–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –æ–±'—î–∫—Ç –∫–Ω–∏–≥–∏

    return {"message": f"Book with id {book_id} has been deleted."}
